# 기초 탐색 알고리즘
# 수많은 데이터 사이에서 원하는 데이터를 찾는 알고리즘

# 순차 탐색(Sequential searching)
# O(N)
# 일치하는 데이터의 인덱스 값을 반환한다.
# 찾지 못하는 경우 None을 반환한다.
def sequential_search(dataList, targetData):
    for index, data in enumerate(dataList):
        if data == targetData:
            return index
    return None

# 이진 탐색(Binary search)
# 분할, 정복 방식을 적용한 탐색 알고리즘
# logN + 1회 이상을 넘지 않는다

# middle < target인 경우 left = middle + 1 이다.
# middle > target인 경우 right = middle - 1 이다.
# def binary_search(dataList, targetData):
#     # left와 right 초기값 지정
#     left = 0
#     right = len(dataList) - 1
#
#     # 값을 찾거나 left > right인 경우 멈춤
#     while left <= right:
#         # middle을 구함.
#         middle = (left + right) // 2
#
#         if dataList[middle] == targetData:
#             #middle의 값이 targetData이면 middle 반환
#             return middle
#
#         elif dataList[middle] < targetData:
#             # middle의 값이 targetData보다 작으면 middle 오른쪽에서 찾음
#             left = middle + 1
#
#         else:
#             # middle의 값이 targetData보다 크면 middle 왼쪽에서 찾음
#             right = middle - 1
#
#     return None # 찾지 못함

# array = [1,3,4,6,7,8,10,13,14,18,19,21,24,37,40,45,71]
# print(binary_search(array, 7))  # 출력: 4

# 재귀 함수로 구현
# def binary_search(dataList, targetData, left, right):
#     if left > right:
#         return None
#     middle = (left + right) // 2
#     if dataList[middle] == targetData:
#         return middle
#     elif dataList[middle] < targetData:
#         return binary_search(dataList, targetData, middle + 1, right)
#     else:
#         return binary_search(dataList, targetData, left, middle - 1)
#
# array = [1,3,4,6,7,8,10,13,14,18,19,21,24,37,40,45,71]
# print(binary_search(array, 7, 0, len(array) - 1))  # 출력: 4

# 프로그래머스 43238 입국심사
# n = 6
# times = [7, 10]
#
# def solution(n, times):
#     answer = 0
#     # 최소 시간
#
#     left = 1
#
#     # 최대 시간
#     right = n * max(times)
#
#     while left <= right:
#         middle = (left + right) // 2
#
#         # middle 시간 동안 처리할 수 있는 입국자
#         arrivals = 0
#         for t in times:
#             arrivals += (middle // t)
#
#         # n명의 입국자를 처리해야 하는데,
#         # 계산된 입국자가 n보다 작다면
#         if arrivals < n:
#             left = middle + 1
#         # 계산된 입국자가 n보다 크거나 같다면
#         else:
#             right = middle - 1
#     return left # 최소 시간
#
# print(solution(n, times))

# 깊이 우선 탐색 (DFS)
# def DFS(matrix, start_node):
#     visit = [False] * len(matrix)
#     stack = []
#
#     # 스택에 탐색 시작 노드를 넣는다.
#     stack.append(start_node)
#     visit[start_node] = True
#     print('방문', start_node)
#
#     # 스택이 빌 때까지 탐색 수행
#     while stack:
#         node = stack.pop()  # 방문한 위치(노드 번호)
#
#         # 현 위치에서 방문 가능한 모든 노드들을 스택에 넣는다.
#         for next_node in range(len(matrix)):
#             if matrix[node][next_node] == 1:
#                 if not visit[next_node]:
#                     stack.append(next_node)
#                     visit[next_node] = True
#                     print('방문', next_node)

# 재귀 함수로 구현
# visit = {}
# def DFS(matrix, node):
#     visit[node] = True
#     print('방문', node)
#
#     for next_node in range(len(matrix)):
#         if matrix[node][next_node] == 1:
#             if next_node not in visit:
#                 DFS(matrix, next_node)
#
#
# matrix = [
#     [0,1,1,0,0],
#     [1,0,1,1,0],
#     [1,1,0,0,0],
#     [0,1,0,0,1],
#     [0,0,0,1,0]
# ]
#
# DFS(matrix, 0)
