# 너비 우선 탐색(BFS)
# 탐색의 순서가 이미 정해져 있음
# queue 사용
# 비용의 크기가 정해져 있지 않을 때 사용

# from collections import deque
#
# def BFS(matrix, start_node):
#     visit = [False] * len(matrix)
#     queue = deque()
#
#     # 큐에 탐색 시작 노드를 넣는다.
#     queue.append(start_node)
#     visit[start_node] = True
#     print('방문', start_node)
#
#     # 큐가 빌 때까지 탐색 수행
#     while queue:
#         node = queue.popleft()  # 방문한 위치(노드 번호)
#
#         # 현 위치에서 방문 가능한 모든 노드들을 큐에 넣는다.
#         for next_node in range(len(matrix)):
#             if matrix[node][next_node] == 1:
#                 if not visit[next_node]:
#                     queue.append(next_node)
#                     visit[next_node] = True
#                     print('방문', next_node)
#
# amatrix = [
#     [0,1,0,1,0],
#     [1,0,1,0,0],
#     [0,1,0,1,1],
#     [1,0,1,0,0],
#     [0,0,1,0,0]
# ]
#
# BFS(amatrix, 0)

# 프로그래머스 1844 게임 맵 최단거리

# from collections import deque
# maps = [
#     [1,0,1,1,1],
#     [1,0,1,0,1],
#     [1,0,1,1,1],
#     [1,1,1,0,1],
#     [0,0,0,0,1]
# ]
# # 이동 가능한 블록 좌표인지 검증하는 함수
# def movable(x, y, maps):
#     w = len(maps)
#     h = len(maps[0])
#     if 0 <= x < w and 0 <= y < h and maps[x][y] == 1:
#         return True
#     return False
#
# def bfs(maps):
#     # 방문을 표시할 이중 리스트 생성
#     visit = [[False] * len(m) for m in maps]
#     # 큐를 준비
#     queue = deque()
#     # 목표 좌표
#     tx, ty = len(maps) - 1, len(maps[0]) - 1
#     # 시작 좌표 및 경로 길이의 초기값 enqueue
#     queue.append((0, 0, 1)) # x, y, d
#
#     while queue:
#         # 좌표와 경로 길이를 dequeue
#         x, y, d = queue.popleft()
#         # 꺼낸 좌표와 끝 좌표가 같다면 경로 길이 반환
#         if (x, y) == (tx, ty):
#             return d
#         # 현재 좌표에서 갈 수 있는 경로를 큐에 enqueue
#         offsets = [(1,0), (-1, 0), (0, 1), (0, -1)]
#         for ox, oy in offsets:
#             nx, ny = x + ox, y + oy
#             if movable(nx, ny, maps) and not visit[nx][ny]:
#                 queue.append((nx, ny, d + 1))   # 경로의 길이도 증가
#                 visit[nx][ny] = True
#     return -1
# def solution(maps):
#     return bfs(maps)
#
# print(solution(maps))

# 유효한 테두리 좌표인지 검사하는 함수
# (좌표(x, y), 사각형 리스트(rectangle))
def is_boundary(point, rects):
    # 1. point가 어떤 rect의 범위에 속해야하고,
    x, y = point
    stat = False
    for rect in rects:
        x1, y1, x2, y2 = rect
        if x1 <= x <= x2 and y1 <= y <= y2:
            stat = True
            break

    if not stat:
        return False

    # 2. 그리고 point는 어떤 rect의 테두리 내부면 안됨.
    for rect in rects:
        x1, y1, x2, y2 = rect
        if x1 < x < x2 and y1 < y < y2:
            return False

    return True

# 0.5씩 움직이며 검사
def solution(rectangle, characterX, characterY, itemX, itemY):
    answer = 0
    return answer
