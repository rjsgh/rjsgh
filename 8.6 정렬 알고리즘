#정렬
#선택 정렬
# def a(l):
#     m, d = 0, 0
#     for i in range(len(l)):
#         d = l[i]
#         for j in range(len(l)):
#             m = min(l)
#             if l[j] == m:
#                 d, m = m, d
#     return l

# 풀이
# def selection_sort(A):
#     for i in range(len(A)):
#         k = i
#         for j in range(i + 1, len(A)):
#             if A[k] > A[j]:
#                 k = j
#         A[k], A[i] = A[i], A[k]
#
# A = [3, 2, 5, 1, 4]
# selection_sort(A)
# print(A)

#버블 정렬
# def bubble_sort(A):
#     for i in range(len(A)-1,0,-1):
#         for j in range(0,i):
#             if A[j] > A[j+1]:
#                 A[j], A[j+1] = A[j+1], A[j]

# 풀이
# def bubble_sort(A):
#     for i in range(len(A)-1, 0, -1):
#         for j in range(0, i):
#             if A[j] > A[j+1]:
#                 A[j], A[j+1] = A[j+1], A[j]

# A = [3,2,5,1,4]
# bubble_sort(A)
# print(A)

#삽입 정렬
# def insertion_sort(A):
#     for i in range(1,len(A)):
#         k = A[i]
#         for j in range(i, 0, -1):
#             print(k)
#             if A[j-1] < k:
#                 A[j] = A[j-1]
#             elif A[j-1] > k:
#                 A[j] = k
#             # print(A)

# 풀이
# def insertion_sort(A):
#     for i in range(1, len(A)):
#         k = A[i]
#         j = i
#         while A[j - 1] > k and j > 0:
#             A[j] = A[j - 1]
#             j -= 1
#         A[j] = k
#
#
# A = [3,2,5,1,4]
# insertion_sort(A)
# print(A)

#퀵 정렬
# def quick_sort(A):
#     left, right, p = 0, len(A)-1, len(A)//2
#     while left < right:
#         while A[left] < A[p] and A[left] != A[p]:
#             left += 1
#         while A[right] > A[p] and A[right] != A[p]:
#             right -= 1
#         print(A)
#         A[left], A[right] = A[right], A[left]
#     # quick_sort(A)

# 풀이
# def quick_sort(A, left, right):
#     if right - left < 1:    # 원소의 개수가 1개보다 작으면 리턴
#         return
#
#     p = A[(left + right) // 2]  # 피벗값 선택
#     i = left    # left의 위치
#     j = right   # right의 위치
#     while i < j:    # left, right가 만나거나 교차하기 전까지 반복
#         while A[i] < p: # 피벗 보다 큰 A[i]를 찾음
#             i += 1
#         while A[j] > p: # 피벗 보다 작은 A[i]를 찾음
#             j -= 1
#         A[i], A[j] = A[j], A[i] # 두 값을 교환함.
#
#     quick_sort(A, left, i-1)    # 남은 부분에 대해 퀵 소트
#     quick_sort(A, j+1, right)   # 남은 부분에 대해 퀵 소트
#
#
# A = [3, 9, 2, 8, 5, 1, 6, 4, 7]
# quick_sort(A, 0, len(A)-1)
# print(A)

#합병 정렬
# def merge_sort(A):
#     if len(A) < 2:
#         return A
#     # 분할 과정
#     mid = len(A) // 2
#     left_A = merge_sort(A[:mid])
#     right_A = merge_sort(A[mid:])
#     # 분할이 끝나면 합치기 시작한다.
#     merged_A = []
#     l = 0
#     r = 0
#     while l < len(left_A) and r < len(right_A):
#         # 둘 중 작은 값을 찾아 넣는다.
#         if left_A[l] > right_A[r]:
#             merged_A.append(right_A[r])
#             r += 1
#         else:
#             merged_A.append(left_A[l])
#             l += 1
#     # 남은 리스트를 그대로 합친다.
#     merged_A += left_A[l:]
#     merged_A += right_A[r:]
#
#     return merged_A
#
#
# A = [6,2,8,1,3,9,4,5,10,7]
# A = merge_sort(A)
# print(A)
