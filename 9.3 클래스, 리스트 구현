# 연결 리스트 구현해보기
# 순차 자료구조 (Sequential data type)
# 물리적으로 연속적으로 저장하고 접근하는 자료구조를 뜻한다.
# C 언어와 같은 로우레벨 언오는 순차 자료구조로 배열이라는 자료구조를 사용한다.

# 연속 자료구조 (Linked data type)
# 메모리상에서 연속정으로 존재하지 않는다.
# 물리적인 위치와 관계없이 연결이라는 논리적인 순서로 데이터를 접근한다.

# 노드 클래스 구현하기
# class Node:
#     def __init__(self, data, link=None):
#         self.data = data
#         self.link = link
# #
# # b = Node(2)
# # a = Node(1, b)
# # print(a.data)       # 출력: 1
# # print(a.link.data)  # 출력: 2
# # print(a.link.link)  # 출력: None
# 
# # Mylist 클래스 작성하기1
# class Mylist:
#     def __init__(self, *args):
#         self.head = None
#         self.tail = None
#         self.length = 0
#         for arg in args:
#             self.append(arg)
# 
#     def append(self, data):
#         # 새로운 노드 생성
#         node = Node(data)
# 
#         # 리스트가 비어있는 경우
#         if self.head is None:
#             self.head = node
#             self.tail = node
#         # 리스트가 비어있지 않은 경우
#         else:
#             self.tail.link = node
#             self.tail = node
#         # 연결 후 길이를 늘려준다.
#         self.length += 1
# 
#     def __iter__(self):
#         # 이터레이터를 반환하는 제너레이터 함수 구현
#         def gen():
#             # 첫 번째 노드를 현재 노드로 초기화
#             curr = self.head
#             # 노드가 None이 아닐 때까지 반복
#             while curr is not None:
#                 # 노드의 데이터를 next 호출시 넘김
#                 yield curr.data
#                 # 다음 노드로 넘어감
#                 curr = curr.link
# 
#         # 함수를 호출하여 이터레이터 반환
#         return gen()
# 
#     def __len__(self):
#         return self.length
# 
#     def __str__(self):
#         # 시작 문자열은 '<' 다
#         s = "<"
#         # 각 data를 하나씩 접근한다.
#         for idx, data in enumerate(self):
#             # data를 문자열로 만들어 붙인다.
#             s += str(data)
#             # 마지막 원소가 아니면 ", "를 붙인다.
#             if idx < len(self) - 1:
#                 s += ", "
#             # 마지막 원소면 ">"을 붙인다.
#             else:
#                 s += ">"
#         # 완성된 문자열 반환
#         return s
# 
#     def __getitem__(self, item):
#         # 정수 번호가 아니면 예외를 발생시킴
#         if type(item) is not int:
#             raise TypeError("인덱스는 반드시 정수여야 합니다.")
# 
#         # 음수인 경우 인덱스를 리스트의 마지막 위치에서 계산함
#         if item < 0:
#             item = len(self) + item
# 
#         # 인덱스 범위 초과시 예외를 발생시킴
#         if item >= len(self) or item < 0:
#             raise IndexError("인덱스 범위를 벗어났습니다.")
# 
#         # 인덱스 번호 순서에 맞는 데이터를 리턴함
#         for idx, data in enumerate(self):
#             if idx == item:
#                 return data
# 
#     def __setitem__(self, key, value):
#         if type(key) is not int:
#             raise TypeError("인덱스는 반드시 정수여야 합니다.")
# 
#         if key < 0:
#             item = len(self + key)
# 
#         if key >= len(self) or key < 0:
#             raise IndexError("인덱스 범위를 벗어났습니다.")
# 
#         # 데이터를 바꾸려면 노드에 직접 접근한다.
#         curr = self.head
#         # key 만큼 링크를 이동시켜서 데이터를 바꾼다.
#         for i in range(key):
#             curr = curr.link
#         curr.data = value
# mylist = Mylist(1,2,3,4)
# mylist[3] = 5
# print(mylist)
# print(mylist[3])    # 5 가 출력됨.
