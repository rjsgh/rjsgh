#프로그래머스 60058 괄호 변환
# p = "(()())()"
# def solution(p):
#     answer = ''
#     u = ""
#     v = ""
#     l = []
#     count1 = 0
#     count2 = 0
#     for i in v:
#         if count1 == count2 != 0:
#             v += i
#         else:
#             if i == '(':
#                 count1 += 1
#                 u += i
#             elif i == ')':
#                 count2 += 1
#                 u += i
#     for i in u:
#         if i == "(":
#             l.append(i)
#         elif i == ")":
#             if l == []:
#                 pass
#                 # answer += "("
#             else:
#                 l.pop()
#     if l == []:
#         answer = u + solution(v)
#
#     return answer
#
#
#
# print(solution(p))

#풀이

# 균형 잡힌 괄호 문자열인지 검사하는 함수
# def balance(s):
#     if s == "":
#         return False
#     return s.count('(') == s.count(')')
#
# # 올바른 괄호 문자열인지 검사하는 함수
# def correct(s):
#     stack = ['']    # 빈 문자열을 넣어 out of index 방지
#     for ch in s:
#         if ch == '(':
#             stack.append(ch)
#         elif ch == ')' and stack[-1] == '(':
#             stack.pop()
#         else:    # 스택의 Top에 매칭되는 닫힌 소괄호가 없으면 올바르지 않음
#             return False
#     return len(stack) == 1  # 스택이 비어있어야 올바름
#
# def solution(p):
#     # 1. 입력이 빈 문자열인 경우와 올바른 경우 그대로 반환
#     if p == "" or correct(p):
#         return p
#     # 2. 문자열 p를 균형잡힌 괄호 문자열 u, v로 분리
#     i = 0
#     while not balance(p[:i]):
#         i += 2
#         u = p[:i]
#         v = p[i:]
#
#     # 3. 문자열 u가 올바른 괄호 문자열인 경우 v에 대해 1단계부터 다시 수행
#     if correct(u):
#         return u + solution(v)
#
#     # 4. 문자열 u가 올바른 괄호 문자열이 아닌 경우 아래 과정 수행
#     else:
#         # 4-1. 빈 문자열에 첫 번째 문자로 '('를 붙임
#         # 4-2. 문자열 v에 대해 1단계부터 다시 수행
#         # 4-3. 끝에 ')'를 붙임
#         answer = '(' + solution(v) + ')'
#
#         # 4-4. u의 첫 번째와 마지막 문자 제거 후 나머지 문자열의 괄호 방향 뒤집어서 뒤에 연결
#         for ch in u[1:-1]:
#             if ch == '(':
#                 answer += ')'
#             else:
#                 answer += '('
#
#     return answer

#프로그래머스 77485 행렬 테두리 회전하기
# row = 6
# columns = 6
# queries = [[2,2,5,4],[3,3,6,6],[5,1,6,3]]
# def solution(rows, columns, queries):
#     l = []
#     for i in range(row):
#         l.append([])
#         for j in range(columns):
#             if i > 0:
#                 l[i].append(j + 1 + l[i-1][-1])
#             else:
#                 l[i].append(j+1)
#     for i in range(len(queries)):
#         for j in range(0,4,2):
#             print(l[queries[i][j]-1][queries[i][j+1]-1])
#     answer = []
#     return answer
#
#
# print(solution(row, columns, queries))

#풀이
# def rotate(matrix, x1, y1, x2, y2):
#     min_v = 100 * 100   # 최소값
#     last = matrix[x1][y1]   # 마지막에 들어갈 값 저장
# 
#     # x1, y1에서 x2, y1까지의 값을 움직임
#     for xn in range(x1, x2):
#         matrix[xn][y1] = matrix[xn+1][y1]
#         min_v = min(min_v, matrix[xn+1][y1])
#     # x2, y1에서 x2, y2까지의 값을 움직임
#     for yn in range(y1, y2):
#         matrix[x2][yn] = matrix[x2][yn+1]
#         min_v = min(min_v, matrix[x2][yn+1])
#     # x2, y2에서 x1, y2까지의 값을 움직임
#     for xn in range(x2-1, x1-1, -1):
#         matrix[xn+1][y2] = matrix[xn][y2]
#         min_v = min(min_v, matrix[xn][y2])
#     # x1, y2에서 x1, y1까지의 값을 움직임
#     for yn in range(y2-1, y1, -1):
#         matrix[x1][yn+1] = matrix[x1][yn]
#         min_v = min(min_v, matrix[x1][yn])
# 
#     matrix[x1][y1+1] = last
#     min_v = min(min_v, last)
#     return min_v
# 
# def solution(rows, columns, queries):
#     # rows x colums 행렬 생성 (좌표가 1부터 시작하므로 각 영역 +1 씩 해줌)
#     matrix = [[0] * (columns + 1) for _ in range(rows + 1)]
# 
#     # 값을 순서대로 채워줌
#     for x in range(1, rows + 1):
#         for y in range(1, columns + 1):
#             matrix[x][y] = columns * (x - 1) + y
# 
#     # 주어진 queries 영역을 시계방향 회전시키면서 최소값 리스트를 만듦
#     answer = []
#     for query in queries:
#         x1, y1, x2, y2 = query  # 각 좌표
#         answer.append(rotate(matrix, x1, y1, x2, y2))
#     return answer
