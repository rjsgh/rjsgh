#프로그래머스 12926 시저암호
s = "a B z"
n = 4
# def solution(s, n):
#     answer = ''
#     sv = s
#     s = s.upper()
#     a = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
#     l = []
#     for i in s:
#         if i == ' ':
#             l.append("1")
#         else:
#             l.append(a.index(i))
#     for i in l:
#         if i == "1":
#             answer += ' '
#         else:
#             if i+n >= 26:
#                 answer += a[i+n-26]
#             elif i+n < 26:
#                 answer += a[i+n]
#     for i in sv:
#         if i.isupper():
#             answer = i.upper()
#         else:
#             answer = i.lower()
#     return answer
#
# print(solution(s,n))

# 해설
# def solution(s,n):
#     alphabet = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q",
#                 "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
#
#     answer = []
#     for i in s:
#         if i == ' ':
#             answer.append(i)
#         else:
#             # 문자가 대문자일 경우
#             if i.isupper():
#                 answer.append(alphabet[(alphabet.index(i) + n) % 26])
#             # 문자가 소문자일 경우
#             else:
#                 answer.append(alphabet[(alphabet.index(i.upper()) + n) % 26].lower())
#
#     answer = ''.join(answer)
#
#     return answer
#
# print(solution("a B z", 4))

# 해설 2

# def solution(s,n):
#     answer = ''
#     for i in s:
#         if i.isupper():
#             answer += (chr((ord(i) - ord('A') + n) % 26 + ord("A")))
#         elif i.islower():
#             answer += chr((ord(i) - ord("a") + n) % 26 + ord("a"))
#         elif i == ' ':
#             answer += i
#
#     return answer
#
# print(solution("a B z", 4))

#프로그래머스 12973 짝지어 제거하기
# s = "baabaa"
# def solution(s):
#     answer = 0
#     a = 0
#     i = 0
#     l = []
#     for i in s:
#         l.append(i)
#     while l:
#         i += 1
#         if not l:
#             return 1
#         else:
#             if l[i] == l[i+1]:
#                 l.pop(i)
#                 l.pop(i)
#                 print(l)
#                 i = 0
#             else:
#                 continue
#     if not l:
#         return 1
#     else:
#         return 0
# print(solution(s))

# 해설
# def solution(s):
#
#     stack = []
#
#     for i in s:
#         if not stack:       # 스텍이 비어있으면 추가
#             stack.append(i)
#         elif stack[-1] == i: # 스텍의 마지막이 i와 같으면 스텍에서 제거
#             stack.pop()
#         else:               # 스텍의 마지막과 i가 다르면 i 추가
#             stack.append(i)
#
#     if stack:
#         return 0
#     else:
#         return 1

#프로그래머스 17681 [1차]비밀지도
# n = 5
# arr1 = [9, 20, 28, 18, 11]
# arr2 = [30, 1, 21, 17, 28]
# def binary(arr, n):
#     binary_list = []
#     for i in arr:
#         i_binary = []
#         while i:    # 이진수 형태로 추가
#             i_binary.append(i%2)
#             i = i // 2
#         i_binary.reverse()
#         while len(i_binary) != n:   # 지도의 크기 만큼의 공백 추가
#             i_binary.insert(0,0)
#         binary_list.append(i_binary)
#     return binary_list
# def solution(n, arr1, arr2):
#     answer = []
#     answer_ = []
#     a = ''
#     first_arr = binary(arr1, n)
#     second_arr = binary(arr2, n)
#     for i in range(n):
#         answer.append([])
#         for j in range(len(first_arr)):
#             answer[i].append(first_arr[i][j] + second_arr[i][j])
#             if answer[i][j] == 2:
#                 answer[i][j] -= 1
#             if answer[i][j] == 1:
#                 answer[i][j] = "#"
#             else:
#                 answer[i][j] = ' '
#         for j in answer[i]:
#             a += j
#         answer_.append(a)
#         a = ''
#     return answer_
#
# print(solution(n,arr1,arr2))

# 풀이
n = 5
arr1 = [9, 20, 28, 18, 11]
arr2 = [30, 1, 21, 17, 28]
def binary(arr, n):
    binary_list = []
    for i in arr:
        i_binary = []
        while i:    # 이진수 형태로 추가
            i_binary.append(i%2)
            i = i // 2
        i_binary.reverse()
        while len(i_binary) != n:   # 지도의 크기 만큼의 공백 추가
            i_binary.insert(0,0)
        binary_list.append(i_binary)
    return binary_list
def solution(n, arr1, arr2):
    first_arr = binary(arr1, n)
    second_arr = binary(arr2, n)
    answer = []

    #TODO: first_arr과 second_arr의 같은 위치에 있는 원소가 1이 있으면 #으로 둘다 0이면 공백으로 바꾸어서 answer에 추가
    for j in range(n):
        block_list = ''
        for k in range(n):
            # 두 개의 지도 모두 0이면 최종 지도에서 공백으로 표현
            if first_arr[j][k] == 0 and second_arr[j][k] == 0:
                block_list += ' '
            # 둘중 하나라도 1이 존재하면 벽이므로 #삽입
            else:
                block_list += '#'
        answer.append(block_list)
    return answer
print(solution(n,arr1,arr2))
