# 플로이드-워셜 (Floyd-Warshall Algorithm)
# 음의 가중치를 가질 수 있고
# 모든 정점에서 다른 모든 정점으로 가는 최단 경로를 구할 수 있음
# 3중 for문으로 구현 가능, O(V^3)

# 모든 노드에 대한 최단 거리 테이블 초기화
# 중간 노드 m만큼, 시작 노드 x만큼, 목적지 노드 y만큼 노드를 순회하며 최단 거리 갱신

# 플로이드-워셜 알고리즘
# matrix: 인접 행렬
# def floyd_warshall(matrix):
#     # 정점의 개수
#     v = len(matrix)
#
#     # 1. 최단 거리 테이블 생성 및 초기값 설정
#     d = [[float('inf')] * v for _ in range(v)]
#     for x in range(v):
#         for y in range(v):
#             d[x][y] = matrix[x][y]
#
#     # 2. 중간 지점 노드 m에 대하여 x -> m -> y 비용을 계산하며 최단 거리 갱신
#     for m in range(v):
#         for x in range(v):
#             for y in range(v):
#                 d[x][y] = min(d[x][y], d[x][m] + d[m][y])
#     return d
#
# inf = float('inf')
# amatrix = [
#     [0,   3,   inf, inf],
#     [4,   0,   2,   4],
#     [7,   5,   0,   3],
#     [inf, inf, 1,   0]
# ]
#
# dist = floyd_warshall(amatrix)
# print(dist)
# # [
# #       [0, 3, 5, 7],
# #       [4, 0, 2, 4],
# #       [7, 5, 0, 3],
# #       [8, 6, 1, 0]
# # ]

# 프로그래머스 49191번 순위
# def solution(n, results):
#     answer = 0
#     d = [[float('inf')] * n for _ in range(n)]
#     p = [[0, 0] for _ in range(n)]
#     for x, y in results:
#         d[x-1][y-1] = 1
#     for x in range(n):
#         for y in range(n):
#             if d[x-1][y-1] == 1:
#                 p[x-1][0] += 1
#                 p[y-1][1] += 1
#     for i in range(n):
#         print(p[i])
# solution(5, [[4, 3], [4, 2], [3, 2], [1, 2], [2, 5]])

# 풀이
def solution(n, results):
    # 최단 거리 테이블 생성
    # 승패 유무만 따지면 되므루 inf 대신 0을 사용
    d = [[0] * (n + 1) for _ in range(n + 1)]

    # 최단 거리 테이블 초기화
    for x, y in results:
        d[x][y] = 1  # x가 y에게 이긴 경우
        d[y][x] = -1  # y가 x에게 진 경우

    # 플로이드-워셜
    for m in range(1, n + 1):
        for x in range(1, n + 1):
            for y in range(1, n + 1):
                # x가 m에게 이기고, m이 y에게 이긴 경우
                if d[x][m] == 1 and d[m][y] == 1:
                    d[x][y] = 1
                # x가 m에게 지고, m이 y에게 진 경우
                elif d[x][m] == -1 and d[m][y] == -1:
                    d[x][y] = -1

    # 자기 자신을 제외한 모든 노드에 대하여 승패가 결정된 경우 카운트
    # (0이 하나인 경우)
    answer = 0
    for x in range(1, n + 1):
        zero_cnt = 0
        for y in range(1, n + 1):
            zero_cnt += 1 if d[x][y] == 0 else 0
        if zero_cnt == 1:
            answer += 1

    return answer

print(solution(5, [[4, 3], [4, 2], [3, 2], [1, 2], [2, 5]]))
