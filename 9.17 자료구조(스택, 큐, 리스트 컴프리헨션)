#자료구조
# stack
  # stack은 리스트를 통해 구현하기 좋다.
# queue
  # queue는 리스트에서 구현하면 리스트 앞부분에 자료를 추가하거나 빼는 것이 느리기 때문에
  # collections.deque를 사용한다.

# 리스트 컴프리헨션(list comprehension)
  # 리스트를 만드는 간결한 방법을 제공
  # 이터러블안 멤버들에 어떤 연산을 적용한 결과 리스트를 만들거나
  # 어떤 조건을 만족하는 요소들로 구선된 서브 시퀀스를 만드는 것

# 제곱 리스트를 만든다고 가정하면
# 첫번째 방법
# squares = []
# for x in range(10):
#     squares.append(x**2)

# print(squares)  # 출력: [0,1,4,9,16,25,36,49,64,81]
# print(x)        # 출력: 9
# 메모리를 차지하고 있다.

# 두번째 방법
# squares = list(map(lambda x: x**2, range(10)))

# 세번째 방법(리스트 컴프리헨션)
# squares = [x**2 for x in range(10)]

# 리스트 컴프리헨션 사용법
# [표현식 for 변수 in 이터러블 객체 if 조건]

# new_list = []
# for 변수 in 이터러블 객체:
#   if 조건:
#       new_list.append(표현식)

# 리스트 컴프리헨션은 복잡한 표현식과 중첩된 함수들을 호함할 수 있다.
vec = [-4, -2, 0, 2, 4]

# 원소의 값을 두배로 늘린 새로운 리스트
[x*2 for x in vec]  # [-8, -4, 0, 4, 8]
# 원소중 음수를 제외한 새로운 리스트
[x for x in vec if x >= 0]  # [0, 2, 4]

# 원소에 어떤 함수를 적용시킨 새로운 리스트
[abs(x) for x in vec]   # [4, 2, 0, 2, 4]

fruits = [' Apple ', ' Banana ', ' Coconut ']

# 원소의 메서드를 실행시킨 새로운 리스트
[f.strip() for f in fruits] # ['Apple', 'Banana', 'Coconut']

# 튜플 원소를 가지는 리스트
[(x, x**2) for x in range(6)]   # [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]

# 두 개의 for문을 사용하여 중첩 리스트 분해
vec = [[1,2,3], [4,5,6], [7,8,9]]
[num for elem in vec for num in elem]   # [1, 2, 3, 4, 5, 6, 7, 8, 9]

# new_list = []
#   for elem in vec:
#       for num in elem:
#           new_list.append(num)

# 중첩된 리스트 컴프리헨션
matrix = [
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12]
]
# 다음 리스트 컴프리헨션은 위 행렬의 전치 행렬을 만든다.
# (전치 행렬이란 \ 대각선 축을 기준으로 행과 열을 뒤바꾼 행렬을 말한다.)

# transposed = [[row[i] for row in matrix] for i in range(4)]
# [
#       [1, 5, 9],
#       [2, 6, 10],
#       [3, 7, 11],
#       [4, 8, 12]
#]
# 이 리스트 컴프리헨션은 다시 아래와 같이 풀어서 해석 할 수 있다.
# transposed = []
# for i in range(4):
#     transposed_row = []
#     for row in matrix:
#         transposed_row.append(row[i])
#     transposed.append(transposed_row)

# 이 예제는 중첩된 리스트 컴프리헨션에 대한 좋은 예지만, 더 간단한 방법도 존재할 가능성이 있다.
# 이 경우 복잡한 흐름문 대신 내장 함수 zip()을 사용하여 간단하게 해결 할 수 있다.
list(zip(*matrix))  # 출력: [
#                           (1, 5, 9),
#                           (2, 6, 10),
#                           (3, 7, 11),
#                           (4, 8, 12)
#                           ]
# 리스트 앞의 *은 unpacking 연산자다.

# 연습문제

# 백준 17608번 막대기
# import sys
# l = []
# n = sys.stdin.readline()
# answer_l = [0]
# for i in range(int(n)):
#     l.append(int(sys.stdin.readline()))
# for j in range(len(l), 0, -1):
#     if answer_l[-1] < l[j-1]:
#         answer_l.append(l.pop())
#     else:
#         l.pop()
# print(len(answer_l))

# 풀이
# import sys
#
# # 막대기의 개수 입력
# n = int(sys.stdin.readline())
#
# # 각 막대기의 길이를 스택에 입력
# stack = [int(sys.stdin.readline()) for _ in range(n)]
#
# # 보이는 막대기의 개수.
# count = 0
#
# # 막대기의 최대 길이 스택 검사 전이므로 0
# max_stick = 0
#
# # 스택에서 막대기를 하나씩 빼며 길이를 검사
# while stack:
#     # 스택에서 막대기 하나를 꺼냄
#     stick = stack.pop()
#     # 지금까지 나온 막대기보다 긴 막대기인 경우
#     # 보이는 막대기임.
#     if stick > max_stick:
#         max_stick = stick
#         count += 1
#
# print(count)

# 백준 12873 기념품

# 답은 맞지만 시간초과

# import sys
# from collections import deque
#
# n = int(sys.stdin.readline())
# t = 0
#
# queue = deque([i for i in range(1, n+1)])
#
# while len(queue) != 1:
#     t += 1
#     for i in range(t**3):
#         a = queue.popleft()
#         queue.append(a)
#     queue.pop()
# print(queue[0])

# 풀이
import sys
from collections import deque

# 참가자 수를 입력받는다.
n = int(sys.stdin.readline())

# 참가자 수 만큼 1번 부터 N번까지의 번호를 큐에 추가한다.
queue = deque([i for i in range(1, n+1)])

# 현재 단계
t = 1

# 참가자 한명이 남을 때까지 반복
while len(queue) != 1:
    # 큐의 맨 앞에 위치하게 될 참가자의 인덱스 계산
    k = t**3 % len(queue)

    # 해당 참가자가 맨 앞에 오도록 큐를 회전
    for i in range(k):
        x = queue.popleft()
        queue.append(x)

    # 큐의 맨 뒤에 있는 값을 버린다.
    queue.pop()

    # t를 증가시켜 단계를 늘린다.
    t += 1

# 마지막 하나 남은 값을 출력
print(queue[0])
